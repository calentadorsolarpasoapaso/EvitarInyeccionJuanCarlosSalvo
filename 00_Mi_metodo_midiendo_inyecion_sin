  //concociendola resitencia de la estufa donde disipar la energía.
  
  #include "EmonLib.h"     // Include Emon Library (para el calculo de la potencia
  #include <TFT.h>         // Arduino LCD library
  #include <SPI.h>
  EnergyMonitor emon1;     // Create an instance
  
  // pin definition for the Uno  pantalla TFT
  #define cs   10
  #define dc   9
  #define rst  8
  // create an instance of the library
  TFT TFTscreen = TFT(cs, dc, rst);
  
  // matriz de caracteres a imprimir a la pantalla
  char PrPrintout[14];
  char PWPrintout[14];
  char IrPrintout[14];
  char VrPrintout[14]; 
  char PfPrintout[14];
  char EePrintout[14];
  char EiPrintout[14];
  
  long a = 0; //  para imprimir en pantalla cada cierto tiempo
  long cont_rele=101; //definir contador de tiempo del rele
  float borra_p; // para borrar el la pontecia escrita en pantalla TFT
  float borra_w;
  float borra_i;
  float borra_v;
  float borra_f;
  float borra_Ee; 
  float borra_Ei;
  
  //VARIABLES DE EMOND
    float realPower=1;        // Real Power into variable
    float apparentPower;    // Apparent Power into variable
    float powerFactor;      // Power Factor into Variable
    float Vrms;             // Vrms into Variable
    float Irms;             // Irms into Variable
         
  //REGULACION DE POTENCIA
  //const int analogOutPin = 3;   // Analog output pin para el PWM
  int outputPWM = 0;            // value output to the PWM (analog out)
  float resistencia = 120;     // Resistencia de la estufa 120 Ohomios
  float Pc = 0;                 // diferencia entre potencia medidad
  float Pr=230*230/resistencia; // potencia de la estufa inicial
  float Pwm=0;                // potencia a disipar
  int reset=0;
    
  //variables para el calculo de la Energia importa y exportada
  unsigned long T, T1, T2;
  float Eimpcal=0; // Energia para almacenar para no desbordar los decimales
  float Eexpcal=0;
  float Eimp=0;  // Energia a para imprimir en W
  float Eexp=0;
  
    
void setup()
  {
   pinMode(2,OUTPUT);  // Conecta Rele de tensión
   pinMode(5,OUTPUT);  // enciende Led de inyección y compensación
   pinMode(6,OUTPUT);  // enciende Led de estamos Saturando la estufa.
    
    //* CAMBIA LA FRECUENCIA DE PWM (pines 3 y 11)
    //  Frecuencia = Frecuencia Reloj / (2* prescaler* 255).
    //  Frecuencia = 16.000.000 / (2 * 1* 255). = 31,37 KHz
    //  Frecuencia = 16.000.000 / (2 * 8* 255). = 3,9 KHz
    //TCCR2A = 0x81; // seleccion del contador.
    //TCCR2B = 0x01; // prescaler = 01=1, 02=8, 03.
    //OCR2A = 255;   // tope de la señal o maximo pwm
    //OCR2B = 50;   // tope de la señal o maximo pwm
    //TIMSK2 = 0;   //des habilita cualquier interrupcion que
    //pueda haber para evitar posibles conflictos.
    
    TCCR2A = _BV(COM2A1) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20); // modo PWM fast
    TCCR2B = _BV(CS21);  //prescaler a 8   
    // Fast_PWM_frequency = (16 000 000) / (Prescale_factor * 256); =7.812 Hz
    
    
    // Serial.begin(9600); // iniciar puerto serie
  
    // CALIBRAR LAS LECTURAS DE TENSIÓN DE INTENSIDAD
    emon1.voltage(2, 274, 1); // Voltage: input pin, calibration, phase_shift (calibrar con regla de 3)
    emon1.current(1, 24);      // Current: input pin, calibration. (ajustar a intensidades bajas)
  
    // INICIAR LA PANTALLA TFT
    TFTscreen.begin();
    // borrar la pantalla con un fondo negro
    TFTscreen.background(0, 0, 0);
    // Establecer el color de fuente a blanco
    TFTscreen.stroke(255, 255, 255);
    // set the font size
    //TFTscreen.setTextSize(2);
    // write the text to the top left corner of the screen
    //TFTscreen.text("Medicion :\n ", 0, 0);   // Escribir el texto estático a la pantalla
    // establece el tamaño de fuente muy grande para el bucle
    TFTscreen.setTextSize(2);
  }
  
  void loop()
  {
    
   T1=millis(); //tomo tiempo 1 para calculo de la energía
    
 // CALCULO DELA POTENCIA
    emon1.calcVI(20, 1000); // Calculate all. No.of half wavelengths (crossings), time-out
    //emon1.serialprint();   // Print out all variables (realpower, apparent power, Vrms, Irms, power factor)
    realPower       = emon1.realPower;        //extract Real Power into variable
    apparentPower   = emon1.apparentPower;    //extract Apparent Power into variable
    powerFactor     = emon1.powerFactor;      //extract Power Factor into Variable
    Vrms            = emon1.Vrms;             //extract Vrms into Variable
    Irms            = emon1.Irms;             //extract Irms into Variable
  
  if (reset<6){  //para evitar que mida potencias erroneas al arranque
    realPower=0;
    reset=reset+1;
    }
     
 //REGULACION DE POTENCIA
    Pr = Vrms * Vrms / resistencia; // potencia máxima de la estufa
    //Pc = realPower - Pwm; // potencia casa = P mediada - Potencia enviada a la resistencia
    if ((realPower+Pwm) <=-1){         // si la Potencia de casa es menor de cero estamos inyectando
                                      // pongo -1w para dar una margen
        Pwm=-1*realPower + Pwm;
        digitalWrite(5,HIGH);  // Led estamos inyectado
        digitalWrite(2,HIGH);  // Conectamos rele de la etapa de Potencia
        cont_rele=0;          // iniciamos temporizador de conexión del rele.
        }
    else                 // podemos estar inyectando
       if (Pwm>0){      // bajar potencia derivada a la estufa
           Pwm=Pwm-realPower;
           digitalWrite(5,HIGH);  // Led estamos inyectado
           digitalWrite(2,HIGH);  // Conectamos rele de la etapa de Potencia
           cont_rele=0;          // iniciamos temporizador de conexión del rele.
           }
        else {          // potencia de casa superior a la inyectada
            Pwm=0;
            digitalWrite (5,LOW); // NO INYECTAMOS
            }
            
     cont_rele=cont_rele+1;
     if (cont_rele > 100){
         digitalWrite(2,LOW);  // Desconectamos rele de la etapa de Potencia
         cont_rele=101;      // para que no desborde la variable
         } 
    
     if (Pwm > Pr){       // si la potencia que vamos a enviar es mayor que la de la estufa
         Pwm = Pr;         // la igualamos a esta (habria que colocar una estufa de más potencia).
         digitalWrite (6,HIGH); // Saturamos Led rojo
     }
     else {
       digitalWrite (6,LOW); // No Saturacion la máxima potencia de la estufa
     }   
       
     if (Pwm<0){
       Pwm=0;
       }
       
   outputPWM = map(Pwm, 0, Pr, 0, 255);   //mapeamos los valores para la salida de PWM
   analogWrite(3, outputPWM);  // escribimos en el salida 3 del PWM
     
   // Sumatorio de la Energía  
   T2=millis();
   T=(T2-T1);        // 1/1000 para pasar de milis a segundos, no lo hago para no desbordar decimales, se hace al final
   if (T<0){T=T2;}
   if (realPower<0){Eexpcal=Eexpcal+realPower*T/3600;}   // para pasar de segundos a horas /3600 y a W
   else {Eimpcal=Eimpcal+realPower*T/3600;}
   Eexp=Eexpcal/1000; //para imprimir la Energía en W/h
   Eimp=Eimpcal/1000;
    
 // IMPRIME EN LA PANTALLA TFT 1,77" (No imprimo todos los valores para no parpadear tanto)
    a = a + 1;
    if (a == 1) { // imprime solo la primera vez
      pantalla (realPower, Pwm, Irms,Vrms,powerFactor,Eexp,Eimp);
      borra_p = realPower;
      borra_w = Pwm;
      borra_i = Irms;
      borra_v = Vrms;
      borra_f = powerFactor;
      borra_Ee = Eexp;
      borra_Ei = Eimp;
    }
    if (a == 6) {   // imprime uno de cada 5
      borra (borra_p, borra_w, borra_i,borra_v,borra_f,borra_Ee,borra_Ei);
      pantalla (realPower, Pwm, Irms,Vrms,powerFactor,Eexp, Eimp);
      borra_p = realPower;
      borra_w = Pwm;
      borra_i = Irms;
      borra_v = Vrms;
      borra_f = powerFactor;
      borra_Ee = Eexp;
      borra_Ei = Eimp;      
      
      a = 1;
    } 
    
   /*
  //IMPRIME EN EL PUERTO SERIE DEL ORDENADOR
  Serial.print("  a:");
  Serial.print(a);
  Serial.print("  PW:");
  Serial.print(realPower);
  Serial.print("  Pa:");
  Serial.print(apparentPower);
  Serial.print("  V:");
  Serial.print(Vrms);
  Serial.print("  I:");
  Serial.print(Irms);
  Serial.print("  Fac.Potencia:");
  Serial.print(powerFactor);
  Serial.print("  Pr:");
  Serial.print(Pr);
  Serial.print(" outputPWM:");
  Serial.print(outputPWM);
  Serial.print("  Pwm:");
  Serial.println(Pwm); 
  */
  } // final del Void loop()
  
   // *** SUBPROGRAMAS
  //******ESCRIBIR EN LA PANTALLA*************************
  void pantalla (float realPower, float Pwm, float Irms, float Vrms, float powerFactor, float Eexp, float Eimp) {
   
    // imprimir Potencia Real, Pwm
    String PotReal = String(realPower)+" W";
    String PW = String(Pwm)+ " PWM";
    String Ir = String(Irms)+" A";
    String Vr = String(Vrms)+" V";
    String Pf = String(powerFactor)+" cosFi";
    String Ee = String(Eexp)+" W/h"; 
    String Ei = String(Eimp)+" W/h";
    
    // convertir la lectura a una matriz de caracteres
    PotReal.toCharArray(PrPrintout, 14);
    PW.toCharArray(PWPrintout, 14);
    Ir.toCharArray(IrPrintout, 14);
    Vr.toCharArray(VrPrintout, 14);  
    Pf.toCharArray(PfPrintout, 14);  
    Ee.toCharArray(EePrintout, 14);  
    Ei.toCharArray(EiPrintout, 14); 
    
    // set the font color
    TFTscreen.stroke(255, 255, 255);
    // print the sensor value
    TFTscreen.text(PrPrintout, 0, 0);
    TFTscreen.text(PWPrintout, 0, 19);
    TFTscreen.text(IrPrintout, 0, 38);
    TFTscreen.text(VrPrintout, 0, 57);
    TFTscreen.text(PfPrintout, 0, 76);
    TFTscreen.text(EePrintout, 0, 95);
    TFTscreen.text(EiPrintout, 0, 114);
   }
  
  //******BORRAR LA PANTALLA*************************
  void borra (float borra_p, float borra_w, float borra_i, float borra_v, float borra_f, float borra_Ee, float borra_Ei) {
   
    String PotReal = String(borra_p)+" W";
    String PW = String(borra_w)+ " PWM";
    String Ir = String(borra_i)+" A";
    String Vr = String(borra_v)+" V";
    String Pf = String(borra_f)+" cosFi";
    String Ee = String(borra_Ee)+" W/h"; 
    String Ei = String(borra_Ei)+" W/h"; 
    
    // convertir la lectura a una matriz de caracteres
    PotReal.toCharArray(PrPrintout, 14);
    PW.toCharArray(PWPrintout, 14);
    Ir.toCharArray(IrPrintout, 14);
    Vr.toCharArray(VrPrintout, 14);  
    Pf.toCharArray(PfPrintout, 14);  
    Ee.toCharArray(EePrintout, 14);  
    Ei.toCharArray(EiPrintout, 14); 
    
    /*
    String borra_p2 = String(borra_p);
    borra_p2 = borra_p2 + "W";
    String borra_v2 = String(borra_v);
    borra_v2 = borra_v2 + " PWM";
    String borra_i2 = String(borra_i);
    borra_i2 = borra_i2 + "A";
    // convertir la lectura a una matriz de caracteres
    borra_p2.toCharArray(PPrintout, 10);
    borra_v2.toCharArray(VPrintout, 10);
    borra_i2.toCharArray(IPrintout, 10);
   */ 
    
    // borrar el texto que acaba de escribir
    TFTscreen.stroke(0, 0, 0);
    TFTscreen.text(PrPrintout, 0, 0);
    TFTscreen.text(PWPrintout, 0, 19);
    TFTscreen.text(IrPrintout, 0, 38);
    TFTscreen.text(VrPrintout, 0, 57);
    TFTscreen.text(PfPrintout, 0, 76);
    TFTscreen.text(EePrintout, 0, 95);
    TFTscreen.text(EiPrintout, 0, 114);
  }
  
